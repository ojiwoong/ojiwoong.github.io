{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\r\n# 📘 홀수 [자바스크립트 알고리즘]\r\n\r\n## 📖 문제\r\n\r\n```\r\n7개의 자연수가 주어질 때, 이들 중 홀수인 자연수들을 모두 골라 그 합을 구하고, 고른 홀수들\r\n중 최소값을 찾는 프로그램을 작성하세요.\r\n예를 들어, 7개의 자연수 12, 77, 38, 41, 53, 92, 85가 주어지면 이들 중 홀수는 77, 41, 53,\r\n85이므로 그 합은\r\n\r\n<center>77 + 41 + 53 + 8</center>\r\n\r\n이 되고,\r\n\r\n<center>41 < 53 < 77 < 85</center>\r\n\r\n이므로 홀수들 중 최소값은 41이 된다.\r\n\r\n💬 입력설명\r\n\r\n첫 번째 줄에 자연수 7개가 주어진다. 주어지는 자연수는 100보다 작다. 홀수가 한 개 이상\r\n반드시 존재한다.\r\n\r\n💬 출력설명\r\n\r\n첫째 줄에 홀수들의 합을 출력하고, 둘째 줄에 홀수들 중 최소값을 출력한다.\r\n\r\n💬 입력예제 1\r\n\r\n12 77 38 41 53 92 85\r\n\r\n💬 출력예제 1\r\n\r\n256  41\r\n\r\n출처 : 한국정보올림피아드\r\n```\r\n\r\n## 📖 풀이\r\n\r\n### 최초 풀이\r\n\r\n```jsx\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <title>출력결과</title>\r\n  </head>\r\n  <body>\r\n    <script>\r\n      function solution(arr) {\r\n        let answer = [];\r\n        let sum = 0;\r\n        let min = 1000;\r\n\r\n        odd_arr = [];\r\n        for (let i = 0; i < arr.length; i++) {\r\n          if (arr[i] % 2 != 0) odd_arr.push(arr[i]);\r\n        }\r\n\r\n        for (let i = 0; i < odd_arr.length; i++) {\r\n          sum = sum + odd_arr[i];\r\n\r\n          if (min > odd_arr[i]) min = odd_arr[i];\r\n        }\r\n\r\n        answer.push(sum);\r\n        answer.push(min);\r\n\r\n        return answer;\r\n      }\r\n\r\n      arr = [12, 77, 38, 41, 53, 92, 85];\r\n      console.log(solution(arr));\r\n    </script>\r\n  </body>\r\n</html>\r\n```\r\n\r\nfor문을 사용해서 odd_arr 배열에 홀수들을 담아두고,\r\n\r\nodd_arr 배열을 for문을 사용해서 sum 값과 min 값을 구해주었다.\r\n\r\n### 개선 [시간 효율 고려]\r\n\r\n```jsx\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <title>출력결과</title>\r\n  </head>\r\n  <body>\r\n    <script>\r\n      function solution(arr) {\r\n        let answer = [];\r\n        let sum = 0;\r\n        let min = 1000;\r\n\r\n        odd_arr = [];\r\n        for (let i = 0; i < arr.length; i++) {\r\n          if (arr[i] % 2 === 1) {\r\n            sum += arr[i];\r\n\r\n            if (min > arr[i]) min = arr[i];\r\n          }\r\n        }\r\n\r\n        answer.push(sum);\r\n        answer.push(min);\r\n\r\n        return answer;\r\n      }\r\n\r\n      arr = [12, 77, 38, 41, 53, 92, 85];\r\n      console.log(solution(arr));\r\n    </script>\r\n  </body>\r\n</html>\r\n```\r\n\r\n홀수들을 따로 담는 배열을 만들지 않고, 바로 홀수를 체크하는 for문에서 값들을 대입해주었다.\r\n\r\n홀수를 따로 담고, 배열에 담아서 그 배열을 또 for문을 돌리는 것 자체가 일을 한번 더 하는 것이라 시간을 고려했을 때 비효율적인 코드인 것 같다고 생각했다.\r\n\r\n평소 항상 판별한 데이터들을 담아두고, 담아둔 데이터에서 가져가다 쓰는 방식이 습관화 되서 그런 것 같다. 하지만, 어느것이 맞고, 어느것이 틀리다기 보단 상황에 맞게 쓰는 것이 좋다고 생각된다.\r\n\r\n그리고 일반적인  for문 대신에 foreach, for-in, for-of 를 사용해서 코드를 간결화 시키면 좋을거란 생각이 들었다.\r\n\r\n다음 포스팅에서는 foreach, for-in, for-of 의 특징 및 차이점에 대해서 알아보려고 한다.","excerpt":"📘 홀수 자바스크립트 알고리즘 📖 문제 📖 풀이 최초 풀이 for문을 사용해서 odd_arr 배열에 홀수들을 담아두고, odd_arr 배열을 for문을 사용해서 sum 값과 min 값을 구해주었다. 개선 시간 효율 고려 홀수들을 따로 담는 배열을 만…","fields":{"slug":"/210316-post/"},"frontmatter":{"date":"Mar 16, 2021","title":"홀수 [자바스크립트 알고리즘]","tags":["자바스크립트","알고리즘"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# 목차\r\n\r\n- 네이밍 기본\r\n- 파일 및 패키지\r\n- 변수\r\n- 함수\r\n- 객체\r\n- 클래스\r\n- 기타\r\n\r\n# 네이밍 기본\r\n\r\n- **단일 글자**로 이름을 짓지 않고 이름을 통해 쓰임새를 알 수 있도록 한다.\r\n\r\n    ```jsx\r\n    // bad\r\n    function q() {\r\n      // ...\r\n    }\r\n\r\n    // good\r\n    function query() {\r\n      // ...\r\n    }\r\n    ```\r\n\r\n- 이름의 맨 앞이나 맨 뒤쪽에 **밑줄( _ )**을 사용하지 않는다.\r\n\r\n    ```jsx\r\n    // bad\r\n    this.__firstName__ = 'Panda';\r\n    this.firstName_ = 'Panda';\r\n    this._firstName = 'Panda';\r\n\r\n    // good\r\n    this.firstName = 'Panda';\r\n    ```\r\n\r\n- **this**를 변수의 값으로 사용하지 않는다. 필요하다면 **화살표 함수(Arrow Function)**이나 **바인딩**을 사용하라.\r\n\r\n    ```jsx\r\n    // bad\r\n    function foo() {\r\n      const self = this;\r\n      return function () {\r\n        console.log(self);\r\n      };\r\n    }\r\n\r\n    // good\r\n    function bar() {\r\n      return () => {\r\n        console.log(this);\r\n      };\r\n    }\r\n    ```\r\n\r\n- 가독성을 위해 약어는 **모두 대문자** 혹은 **모두 소문자**로 표기한다.\r\n\r\n    ```jsx\r\n    // bad\r\n    import SmsContainer from './containers/SmsContainer';\r\n\r\n    // bad\r\n    const HttpRequests = [\r\n      // ...\r\n    ];\r\n\r\n    // good\r\n    import SMSContainer from './containers/SMSContainer';\r\n\r\n    // good\r\n    const HTTPRequests = [\r\n      // ...\r\n    ];\r\n\r\n    // also good\r\n    const httpRequests = [\r\n      // ...\r\n    ];\r\n\r\n    // best\r\n    import TextMessageContainer from './containers/TextMessageContainer';\r\n\r\n    // best\r\n    const requests = [\r\n      // ...\r\n    ];\r\n    ```\r\n\r\n- export되는 파일 내의 모든 상수는 **모두 대문자**로 표기한다.\r\n\r\n    ```jsx\r\n    // bad\r\n    const PRIVATE_VARIABLE = 'should not be unnecessarily uppercased within a file';\r\n\r\n    // bad\r\n    export const THING_TO_BE_CHANGED = 'should obviously not be uppercased';\r\n\r\n    // bad\r\n    export let REASSIGNABLE_VARIABLE = 'do not use let with uppercase variables';\r\n\r\n    // ---\r\n\r\n    // allowed but does not supply semantic value\r\n    export const apiKey = 'SOMEKEY';\r\n\r\n    // better in most cases\r\n    export const API_KEY = 'SOMEKEY';\r\n\r\n    // ---\r\n\r\n    // bad - unnecessarily uppercases key while adding no semantic value\r\n    export const MAPPING = {\r\n      KEY: 'value'\r\n    };\r\n\r\n    // good\r\n    export const MAPPING = {\r\n      key: 'value'\r\n    };\r\n    ```\r\n\r\n- 이름에 복수형을 표기하지 않는다.\r\n\r\n    ```jsx\r\n    //bad\r\n    let delivery_notes = [\"one\", \"two\"];\r\n\r\n    // good\r\n    let delivery_note_list = [\"one\", \"two\"];\r\n    ```\r\n\r\n- 줄일말을 사용하지 않는다.\r\n\r\n    ```jsx\r\n    //bad\r\n    let del_note = 1;\r\n\r\n    // good\r\n    let delivery_note = 1;\r\n    ```\r\n\r\n# 파일 및 패키지\r\n\r\n- 파일의 이름은 소문자로 표기한다.\r\n\r\n    ```jsx\r\n    // bad\r\n    LonDon.png\r\n    HELLOWORLD.pdf\r\n    APP.js\r\n\r\n    // good\r\n    london.png\r\n    helloworld.pdf\r\n    app.js\r\n    ```\r\n\r\n- 패키지의 이름은 **lowerCamelCase**로 표기한다.\r\n\r\n    ```jsx\r\n    // bad\r\n    my.examplecode.deepspace\r\n    my.example_code.deep_space\r\n\r\n    // good\r\n    my.exampleCode.deepSpace\r\n    ```\r\n\r\n- 파일의 이름은 **default export의 이름**과 일치해야한다.\r\n\r\n    ```jsx\r\n    // file 1 contents\r\n    class CheckBox {\r\n      // ...\r\n    }\r\n    export default CheckBox;\r\n\r\n    // file 2 contents\r\n    export default function fortyTwo() { return 42; }\r\n\r\n    // file 3 contents\r\n    export default function insideDirectory() {}\r\n\r\n    // in some other file\r\n    // bad\r\n    import CheckBox from './checkBox'; // PascalCase import/export, camelCase filename\r\n    import FortyTwo from './FortyTwo'; // PascalCase import/filename, camelCase export\r\n    import InsideDirectory from './InsideDirectory'; // PascalCase import/filename, camelCase export\r\n\r\n    // bad\r\n    import CheckBox from './check_box'; // PascalCase import/export, snake_case filename\r\n    import forty_two from './forty_two'; // snake_case import/filename, camelCase export\r\n    import inside_directory from './inside_directory'; // snake_case import, camelCase export\r\n    import index from './inside_directory/index'; // requiring the index file explicitly\r\n    import insideDirectory from './insideDirectory/index'; // requiring the index file explicitly\r\n\r\n    // good\r\n    import CheckBox from './CheckBox'; // PascalCase export/import/filename\r\n    import fortyTwo from './fortyTwo'; // camelCase export/import/filename\r\n    import insideDirectory from './insideDirectory'; // camelCase export/import/directory name/implicit \"index\"\r\n    // ^ supports both insideDirectory.js and insideDirectory/index.js\r\n    ```\r\n\r\n# 변수\r\n\r\n- 변수의 이름은 **lowerCamelCase**로 표기한다.단, export되는 파일 내의 상수는 예외.\r\n- 변수의 이름은 **알파벳**으로 시작해야한다.\r\n\r\n    ```jsx\r\n    // bad\r\n    let 123Number = 123;\r\n    let HELLO_WORLD = \"Hello World\";\r\n\r\n    // good\r\n    let number = 369;\r\n    let helloString = \"Hello World\";\r\n    ```\r\n\r\n# 함수\r\n\r\n- 함수는 **lowerCamelCase**로 표기한다.\r\n\r\n    ```jsx\r\n    // bad\r\n    function MyFunction() {...}\r\n\r\n    // good\r\n    function myFunction() {...}\r\n    ```\r\n\r\n- 함수의 이름은 동사 또는 동사구문으로 표기한다.\r\n\r\n    ```jsx\r\n    // bad\r\n    function whereIsCamera() { ... }\r\n\r\n    // good\r\n    function findCamera() { ... }\r\n    function getFoo() { ... } // getter\r\n    function setBar() { ... } // setter\r\n    function hasCoo() { ... } // booleans\r\n    ```\r\n\r\n- 함수를 default export할 때는 **camelCase**로 표기한다.단, 함수의 이름이 파일의 이름과 구분되어야 한다.\r\n\r\n    ```jsx\r\n    function makeStyleGuide() {\r\n      // ...\r\n    }\r\n\r\n    export default makeStyleGuide;\r\n    ```\r\n\r\n- 함수 라이브러리를 export할 때는 **PascalCase**로 표기한다.\r\n- 함수의 파라미터는 **lowerCamelCase**로 표기한다.단, 한글자의 파라미터는 public 메소드에서는 사용하지 않는다.\r\n\r\n    ```jsx\r\n    // bad\r\n    function someFunction(SOMEVALUE, SOMEARRAY) { ... }\r\n\r\n    // good\r\n    function someFunction(someValue, someArray) { ... }\r\n    ```\r\n\r\n- 템플릿 함수의 파라미터는 모두 간결해야하고 **한글자** 또는 **한단어**여야 한다.또, **모두 대문자**로 표기한다.\r\n\r\n# 객체\r\n\r\n- 객체의 이름은 **lowerCamelCase**로 표기한다.\r\n\r\n    ```jsx\r\n    // bad\r\n    const OBJEcttsssss = {};\r\n    const this_is_my_object = {};\r\n    function c() {}\r\n\r\n    // good\r\n    const thisIsMyObject = {};\r\n    function thisIsMyFunction() {}\r\n    ```\r\n\r\n- 객체를 export할 때는 **PascalCase**로 표기한다.\r\n\r\n    ```jsx\r\n    const AirbnbStyleGuide = {\r\n      es6: {\r\n      },\r\n    };\r\n\r\n    export default AirbnbStyleGuide;\r\n    ```\r\n\r\n# 클래스\r\n\r\n- 클래스나 생성자의 이름은 **PascalCase**로 표기한다.\r\n\r\n    ```jsx\r\n    // bad\r\n    function user(options) {\r\n      this.name = options.name;\r\n    }\r\n\r\n    const bad = new user({\r\n      name: 'nope',\r\n    });\r\n\r\n    // good\r\n    class User {\r\n      constructor(options) {\r\n        this.name = options.name;\r\n      }\r\n    }\r\n\r\n    const good = new User({\r\n      name: 'yup',\r\n    });\r\n    ```\r\n\r\n- 클래스의 이름은 **명사** 또는 **명사구문**으로 표기한다.또한, 인터페이스의 경우 명사 대신 **형용사** 또는 **형용사구문**으로 표기할 수 있다.\r\n- 클래스를 export할 때는 **PascalCase**로 표기한다.","excerpt":"목차 네이밍 기본 파일 및 패키지 변수 함수 객체 클래스 기타 네이밍 기본 단일 글자로 이름을 짓지 않고 이름을 통해 쓰임새를 알 수 있도록 한다. 이름의 맨 앞이나 맨 뒤쪽에 밑줄( _ )을 사용하지 않는다. this를 변수의 값으로 사용하지 않는…","fields":{"slug":"/210315-post/"},"frontmatter":{"date":"Mar 15, 2021","title":"자바스크립트 코딩 컨밴션","tags":["자바스크립트","코딩컨밴션"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n# Git bash 명령어\r\n\r\n## Git 초기화\r\n\r\n```bash\r\ngit init\r\n```\r\n\r\nGit 초기화를 하면 .git이라는 숨겨진 폴더가 만들어진다. 이것이 로컬 저장소\r\n\r\n로컷 저장소에 내가 만든 버전 정보, 원격 저장소 주소 등이 저장된다.\r\n\r\n원격 저장소에서 내 컴퓨터로 코드를 받아오면 로컬 저장소가 자동으로 생긴다.\r\n\r\n## Git 사용자 정보 등록\r\n\r\n```bash\r\ngit config --global user.name \"Jiwoong Oh\"\r\ngit config --global user.email ojiwoong@gmail.com\r\n```\r\n\r\nGit 커밋 시에 등록할 사용자 정보(이름, 이메일) 등록 \r\n\r\n## Git 원하는 파일 선택\r\n\r\n```bash\r\ngit add index.html\r\n```\r\n\r\n커밋할 파일 선택\r\n\r\n## Git 커밋 메세지를 달아 커밋 생성\r\n\r\n```bash\r\ngit commit -m \"첫번째 커밋\"\r\n```\r\n\r\n커밋메시지 입력\r\n\r\n## 생성한 커밋 히스토리 보기\r\n\r\n```bash\r\ngit log\r\n```\r\n\r\n## 로컬저장소에 GitHub 저장소 연동\r\n\r\n```bash\r\ngit remote add origin https://github.com/ojiwoong/First_Website.git\r\n```\r\n\r\n연동할 저장소 주소 입력\r\n\r\n## 커밋 파일 원격저장소에 저장\r\n\r\n```bash\r\ngit push origin maste\r\n```\r\n\r\n## 원격저장소의 전체파일 로컬저장소에 가져오기\r\n\r\n```bash\r\ngit clone https://github.com/ojiwoong/First_Website.git .\r\n```\r\n\r\n클론할 저장소 주소 입력\r\n\r\n.[점]을 입력해야 현재 폴더에 클론, 미입력 시 새 폴더 생성 및 클론\r\n\r\n## 원격저장소의 변경사항 로컬저장소에 가져오기\r\n\r\n```bash\r\ngit pull origin master\r\n```\r\n\r\n# 유용한 Git 기능들\r\n\r\n## Amend [고치다]\r\n\r\n방금 만든 마지막 커밋에 새로운 내용 추가\r\n\r\n이미 커밋 받은 사람이 있으면 커밋 히스토리가 꼬이기 때문에, 개별적으로 사용하는 브랜치에서만\r\n\r\n주의해서 사용해야함\r\n\r\n## Stash [숨기는 장소]\r\n\r\n작업중이던 파일을 임시로 저장\r\n\r\n## Reset [초기화]\r\n\r\n특정 커밋 히스토리로 되돌림\r\n\r\norigin/master 브랜치도 리셋된 버전으로 변경하기 위해서는 force push [강제푸쉬]를 사용해야 함.\r\n\r\nforce push도 개별적으로 사용하는 브랜치에서만 주의해서 사용해야함.\r\n\r\n[[Reset 명확히 알고가기]](https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-Reset-%EB%AA%85%ED%99%95%ED%9E%88-%EC%95%8C%EA%B3%A0-%EA%B0%80%EA%B8%B0)\r\n\r\n## Revert [되돌림]\r\n\r\n특정 커밋 변경사항을 되돌림\r\n\r\n특정 커밋 히스토리로 되돌아가는 것이 아니라, 새로운 커밋으로 변경사항을 되돌림.\r\n\r\n## Cherry-pick\r\n\r\n다른 별개의 브랜치에서 한 작업의 특정 커밋의 변경사항만 똑 떼서 가져와 커밋\r\n","excerpt":"Git bash 명령어 Git 초기화 Git 초기화를 하면 .git이라는 숨겨진 폴더가 만들어진다. 이것이 로컬 저장소 로컷 저장소에 내가 만든 버전 정보, 원격 저장소 주소 등이 저장된다. 원격 저장소에서 내 컴퓨터로 코드를 받아오면 로컬 저장소가…","fields":{"slug":"/first-post/"},"frontmatter":{"date":"Mar 15, 2021","title":"Git bash 명령어 및 유용한 Git 기능","tags":["git"],"update":"Jan 01, 0001"}}}]}},"pageContext":{}},"staticQueryHashes":["2027115977","694178885"]}